# CONFIG_SITE

# Make any application-specific changes to the EPICS build
#   configuration variables in this file.
#
# Host/target specific settings can be specified in files named
#   CONFIG_SITE.$(EPICS_HOST_ARCH).Common
#   CONFIG_SITE.Common.$(T_A)
#   CONFIG_SITE.$(EPICS_HOST_ARCH).$(T_A)

# CHECK_RELEASE controls the consistency checking of the support
#   applications pointed to by the RELEASE* files.
# Normally CHECK_RELEASE should be set to YES.
# Set CHECK_RELEASE to NO to disable checking completely.
# Set CHECK_RELEASE to WARN to perform consistency checking but
#   continue building anyway if conflicts are found.
CHECK_RELEASE = YES

# Set this when you only want to compile this application
#   for a subset of the cross-compiled target architectures
#   that Base is built for.
#ifeq '$(EPICS_HOST_ARCH)' 'rhel6-x86_64'
#CROSS_COMPILER_TARGET_ARCHS     +=  linuxRT_glibc-x86_64
#endif
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linux-arm%,       	$(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linux-x86,       	$(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linuxRT-i686,       $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linuxRT_glibc-i686, $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linuxRT-arm_zynq,   $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out vxWorks%,           $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out RTEMS%,             $(CROSS_COMPILER_TARGET_ARCHS))

# To install files into a location other than $(TOP) define
#   INSTALL_LOCATION here.
#INSTALL_LOCATION=</path/name/to/install/top>

# Set this when your IOC and the host use different paths
#   to access the application. This will be needed to boot
#   from a Microsoft FTP server or with some NFS mounts.
# You must rebuild in the iocBoot directory for this to
#   take effect.
#IOCS_APPL_TOP = </IOC/path/to/application/top>

# Get settings from AREA_DETECTOR, so we only have to configure once for all detectors if we want to
-include $(AREA_DETECTOR)/configure/CONFIG_SITE
-include $(AREA_DETECTOR)/configure/CONFIG_SITE.$(EPICS_HOST_ARCH)
-include $(AREA_DETECTOR)/configure/CONFIG_SITE.$(EPICS_HOST_ARCH).Common
ifdef T_A
  -include $(AREA_DETECTOR)/configure/CONFIG_SITE.Common.$(T_A)
  -include $(AREA_DETECTOR)/configure/CONFIG_SITE.$(EPICS_HOST_ARCH).$(T_A)
endif

# Build shared and static libs
ifeq (Linux, $(OS_CLASS))
	SHARED_LIBRARIES=YES
	STATIC_BUILD=YES
endif

BUILD_IOCS=NO

# Set the PKG_ARCH
PKG_ARCH	= $(T_A)

ifndef PSPKG_ROOT
ifneq ($(wildcard /reg/g/pcds/pkg_mgr),)
PSPKG_ROOT=/reg/g/pcds/pkg_mgr
endif
ifneq ($(wildcard /afs/slac/g/lcls/pkg_mgr),)
PSPKG_ROOT=/afs/slac/g/lcls/pkg_mgr
endif
endif

ifeq (lcls,$(findstring lcls,$(EPICS_BASE)))
	# LCLS/LCLS2 build
	ifeq '$(PKG_ARCH)' 'linuxRT_glibc-x86_64'
		BR_VERSION	= buildroot-2015.02-x86_64
		PKG_ARCH	= $(BR_VERSION)
	endif
	ifeq '$(PKG_ARCH)' 'linuxRT-x86_64'
		BR_VERSION	= buildroot-2019.08-x86_64
		PKG_ARCH	= $(BR_VERSION)
	endif
	ARAVISPREFIX	= $(PACKAGE_SITE_TOP)/aravis/0.4.1_1/$(PKG_ARCH)
	GLIBPREFIX		= $(PACKAGE_SITE_TOP)/glib/2.52.0/$(PKG_ARCH)
	FFI_TOP			= $(PACKAGE_SITE_TOP)/libffi/3.2.1/$(PKG_ARCH)
	PCRE_TOP		= $(PACKAGE_SITE_TOP)/pcre/8.37/$(PKG_ARCH)
else
	# PCDS build
	ifeq '$(PKG_ARCH)' 'linuxRT_glibc-x86_64'
		PKG_ARCH	= rhel6-x86_64
	endif
	ifeq '$(PKG_ARCH)' 'linuxRT-x86_64'
		PKG_ARCH	= rhel6-x86_64
	endif

	ARAVISPREFIX	= $(PSPKG_ROOT)/release/aravis/0.6.4/$(PKG_ARCH)
	GLIBPREFIX		= $(PSPKG_ROOT)/release/glib/2.56.1/$(PKG_ARCH)
	FFI_TOP			= $(PSPKG_ROOT)/release/libffi/3.2.1/$(PKG_ARCH)
	PCRE_TOP		= $(PSPKG_ROOT)/release/pcre/8.42/$(PKG_ARCH)
	LIBUSB_TOP		= $(PSPKG_ROOT)/release/libusb/1.0.21/$(PKG_ARCH)
endif
FFI_LIB		= $(FFI_TOP)/lib64
PCRE_LIB	= $(PCRE_TOP)/lib

