# Database for the records specific to the aravis GigE driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

include "ADBase.template"

# All tags starting with gdatag are DLS specific for GDA
# % gdatag, template, aravisCamera, $(PORT)_aravisCamera, $(PORT) aravisCamera class instance

# Only 2 data types are supported, unsigned 8 and 16 bit integers
record(mbbo, "$(P)$(R)DataType")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
   info( autosaveFields, "VAL" )
}

record(mbbi, "$(P)$(R)DataType_RBV")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

# Redefine the color mode choices from ADBase.template to only have those that the aravisCamera
# driver supports.  Keep the same values (xxVL), but change the menu numbers.

# Only Mono, Bayer and RGB1 color modes are supported at this time
record(mbbo, "$(P)$(R)ColorMode")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
   info( autosaveFields, "VAL" )
}

record(mbbi, "$(P)$(R)ColorMode_RBV")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}


# % gdatag, pv, ro, $(PORT)_aravisCamera, COMPLETED_RBV, Readback for Frames Completed
record(ai, "$(P)$(R)COMPLETED_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_COMPLETED")
   field(SCAN, "I/O Intr")
   info( autosaveFields, "DESC LLSV LOLO LOW LSV" )
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, FAILURES_RBV, Readback for Frame Failures
record(ai, "$(P)$(R)FAILURES_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_FAILURES")
   field(SCAN, "I/O Intr")
   info( autosaveFields, "DESC HHSV HIHI HIGH HSV" )
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, UNDERRUNS_RBV, Readback for Frame Underruns
record(ai, "$(P)$(R)UNDERRUNS_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_UNDERRUNS")
   field(SCAN, "I/O Intr")
   info( autosaveFields, "DESC HHSV HIHI HIGH HSV" )
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, MISSING_PKTS_RBV, Readback for Missing Packet count
record(longin, "$(P)$(R)MISSING_PKTS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_MISSING_PKTS")
   field(SCAN, "I/O Intr")
   info( autosaveFields, "DESC HHSV HIHI HIGH HSV" )
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, RESENT_PKTS_RBV, Readback for Resent Packet count
record(longin, "$(P)$(R)RESENT_PKTS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_RESENT_PKTS")
   field(SCAN, "I/O Intr")
   info( autosaveFields, "DESC HHSV HIHI HIGH HSV" )
}

record(mbbo, "$(P)$(R)PKT_RESEND")
{
   field(DESC, "Packet resend enable" )
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_PKT_RESEND")
   field(ZRST, "Never")
   field(ZRVL, "0")
   field(ONST, "Always")
   field(ONVL, "1")
   field(VAL,  "1")
   field(PINI, "YES")
   info( autosaveFields, "DESC ONSV SRSV PINI VAL" )
}

record(longout, "$(P)$(R)PKT_TIMEOUT")
{
   field(DESC, "Delay in us before packet resend request" )
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_PKT_TIMEOUT")
   field(VAL,  "20000")
   field(EGU,  "us")
   field(PINI, "YES")
   info( autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL" )
}

record(longout, "$(P)$(R)FRAME_RETENTION")
{
   field(DESC, "Fr timeout after last pkt rcvd" )
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_FRAME_RETENTION")
   field(VAL,  "100000")
   field(EGU,  "us")
   field(PINI, "YES")
   info( autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL" )
}

record(longout, "$(P)$(R)RESET")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_RESET")
   field(FLNK, "$(P)$(R)CONNECTION")
}

record(bi, "$(P)$(R)GETFEATURES_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_GETFEATURES")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
}

record(bo, "$(P)$(R)GETFEATURES") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_GETFEATURES")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(VAL,  "0")
  field(PINI, "YES")
  info( autosaveFields, "DESC VAL" )
}

record(longout, "$(P)$(R)CONNECTION")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_CONNECTION")
   field(VAL, "1")
   field(PINI, "YES")
#  Need to update GevSCPSPacketSiz after each reconnect
   field(FLNK, "$(P)$(R)GevSCPSPacketSiz" )
}

record(calcout, "$(P)$(R)CHKCONN")
{
   field(SCAN, "1 second")
   field(INPA, "$(P)$(R)CONNECTION.SEVR CP")
   field(CALC, "A!=0")
   field(OOPT, "When Non-zero")
   field(OUT,  "$(P)$(R)CONNECTION.PROC PP")
}

record(mbbi, "$(P)$(R)LEFTSHIFT_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_LEFTSHIFT")
  field(ZRST, "No")
  field(ZRVL, "0")
  field(ONST, "Yes")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  info( autosaveFields, "DESC ZRSV ONSV" )
}

## If this is set to 1, then 10, 12 and 16 bit images will be left shifted 
## so that a pixel with maximum exposure = 2^16 no matter what the pixel format 
record(mbbo, "$(P)$(R)LEFTSHIFT") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_LEFTSHIFT")
  field(ZRST, "No")
  field(ZRVL, "0")
  field(ONST, "Yes")
  field(ONVL, "1")
  field(PINI, "YES")
  info( autosaveFields, "DESC ZRSV ONSV VAL" )
}

# Initialize EGU for these common GEV records
record(longin, "$(P)$(R)GevSCDCT_RBV")
{
	field(EGU, "Bps")
}
record(longin, "$(P)$(R)GevSCDMT_RBV")
{
	field(EGU, "Bps")
}
record(longin, "$(P)$(R)GevSCBWA_RBV")
{
	field(EGU, "Bps")
}

# Initialize PINI for these common GEV records to YES
record(longout, "$(P)$(R)GevSCPSPacketSiz")
{
  field(PINI, "YES")
}
record(longout, "$(P)$(R)GevSCPD")
{
  field(PINI, "YES")
}

# Calculate delay per packet for cameras which support GevSCPD
record( calc, "$(P)$(R)GevPktDelay" )
{
    field( INPA, "$(P)$(R)GevSCPD CPP MS" )
    field( INPB, "8.0e-3" )
    field( CALC, "A*B" )
    field( EGU,  "us" )
    field( PREC, "1" ) 
}

# unsupported fields
record(bo, "$(P)$(R)ReverseX") {
  field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY") {
  field(DISA, "1")
}
record(longout, "$(P)$(R)NumExposures") {
  field(DISA, "1")
}  
record(longin, "$(P)$(R)NumExposures_RBV") {
  field(DISA, "1")
}  
record(longin, "$(P)$(R)NumExposuresCounter_RBV") {
  field(DISA, "1")
}
record(mbbo, "$(P)$(R)TriggerMode") {
  field(DISA, "1")
}


record( ao, "$(P)$(R)XmitRate" )
{
    field( DOL,  "125e6" )
    field( EGU,  "Bytes/Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}   

record( ao, "$(P)$(R)CamProcDelay" )
{
    field( DOL,  "1.0e-6" )
    field( EGU,  "Sec" )
    field( PREC, "3" ) 
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}   
# aravisGigE DataType Enumerations
# UInt8=0, UInt16=1
record( calc, "$(P)$(R)XmitDelay" )
{
    field( INPA, "$(P)$(R)ArraySize_RBV CP MS" )
    field( INPB, "$(P)$(R)XmitRate CPP MS" )
    field( INPC, "$(P)$(R)CamProcDelay CPP MS" )
    field( INPD, "$(P)$(R)DataType_RBV CPP MS" )
    field( CALC, "D?(2*A/B+C):(A/B+C)" )
    field( EGU,  "Bytes/Sec" )
}   

record( ao, "$(P)$(R)DriverProcDelay" )
{
    field( DOL,  "1.0e-6" )
    field( EGU,  "Sec" )
    field( PREC, "3" ) 
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}   

#
# TrigToTS_Calc: Calculates expected delay from trigger to timeStamp update 
# Inputs: All units in seconds
#   A   - Camera acquire time (exposure length)
#   B   - Camera image transmission time
#   C   - Estimated driver processing delay before requesting timestamp
record( calc, "$(P)$(R)TrigToTS_Calc" )
{
    field( INPA, "$(P)$(R)AcquireTime_RBV CP MS" )
    field( INPB, "$(P)$(R)XmitDelay CP MS" )
    field( INPC, "$(P)$(R)DriverProcDelay CP MS" )
    field( CALC, "A+B+C" )
    field( EGU,  "sec" )
    field( PREC, "5" ) 
}

